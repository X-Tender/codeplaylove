// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Header renders correctly with class 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Header
    className="my-class"
    headline="My headline"
    subhead="My subhead"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h3
          className="introduction__subhead"
        >
          My subhead
        </h3>,
        <h2
          className="introduction__headline"
        >
          My headline
        </h2>,
      ],
      "className": "header my-class",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "My subhead",
          "className": "introduction__subhead",
        },
        "ref": null,
        "rendered": "My subhead",
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "My headline",
          "className": "introduction__headline",
        },
        "ref": null,
        "rendered": "My headline",
        "type": "h2",
      },
    ],
    "type": "header",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h3
            className="introduction__subhead"
          >
            My subhead
          </h3>,
          <h2
            className="introduction__headline"
          >
            My headline
          </h2>,
        ],
        "className": "header my-class",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "My subhead",
            "className": "introduction__subhead",
          },
          "ref": null,
          "rendered": "My subhead",
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "My headline",
            "className": "introduction__headline",
          },
          "ref": null,
          "rendered": "My headline",
          "type": "h2",
        },
      ],
      "type": "header",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`Header renders correctly without class 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Header
    className=""
    headline="My headline"
    subhead="My subhead"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h3
          className="introduction__subhead"
        >
          My subhead
        </h3>,
        <h2
          className="introduction__headline"
        >
          My headline
        </h2>,
      ],
      "className": "header ",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "My subhead",
          "className": "introduction__subhead",
        },
        "ref": null,
        "rendered": "My subhead",
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "My headline",
          "className": "introduction__headline",
        },
        "ref": null,
        "rendered": "My headline",
        "type": "h2",
      },
    ],
    "type": "header",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h3
            className="introduction__subhead"
          >
            My subhead
          </h3>,
          <h2
            className="introduction__headline"
          >
            My headline
          </h2>,
        ],
        "className": "header ",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "My subhead",
            "className": "introduction__subhead",
          },
          "ref": null,
          "rendered": "My subhead",
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "My headline",
            "className": "introduction__headline",
          },
          "ref": null,
          "rendered": "My headline",
          "type": "h2",
        },
      ],
      "type": "header",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
